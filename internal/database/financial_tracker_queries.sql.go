// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: financial_tracker_queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createNewExpense = `-- name: CreateNewExpense :one
INSERT INTO expenses (
    user_id, 
    budget_id, 
    name,
    category,
    amount, 
    is_recurring, 
    description, 
    date_occurred
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at
`

type CreateNewExpenseParams struct {
	UserID       int64
	BudgetID     int64
	Name         string
	Category     string
	Amount       string
	IsRecurring  bool
	Description  sql.NullString
	DateOccurred time.Time
}

type CreateNewExpenseRow struct {
	ID        int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateNewExpense(ctx context.Context, arg CreateNewExpenseParams) (CreateNewExpenseRow, error) {
	row := q.db.QueryRowContext(ctx, createNewExpense,
		arg.UserID,
		arg.BudgetID,
		arg.Name,
		arg.Category,
		arg.Amount,
		arg.IsRecurring,
		arg.Description,
		arg.DateOccurred,
	)
	var i CreateNewExpenseRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createNewIncome = `-- name: CreateNewIncome :one
    INSERT INTO income (
        user_id, 
        source, 
        original_currency_code, 
        amount_original, 
        amount, 
        exchange_rate, 
        description, 
        date_received
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
) RETURNING id, created_at, updated_at
`

type CreateNewIncomeParams struct {
	UserID               int64
	Source               string
	OriginalCurrencyCode string
	AmountOriginal       string
	Amount               string
	ExchangeRate         string
	Description          sql.NullString
	DateReceived         time.Time
}

type CreateNewIncomeRow struct {
	ID        int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateNewIncome(ctx context.Context, arg CreateNewIncomeParams) (CreateNewIncomeRow, error) {
	row := q.db.QueryRowContext(ctx, createNewIncome,
		arg.UserID,
		arg.Source,
		arg.OriginalCurrencyCode,
		arg.AmountOriginal,
		arg.Amount,
		arg.ExchangeRate,
		arg.Description,
		arg.DateReceived,
	)
	var i CreateNewIncomeRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const createNewRecurringExpense = `-- name: CreateNewRecurringExpense :one
INSERT INTO recurring_expenses (
    user_id, budget_id, amount,name, description, recurrence_interval,projected_amount, next_occurrence
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8
)
RETURNING id, created_at, updated_at
`

type CreateNewRecurringExpenseParams struct {
	UserID             int64
	BudgetID           int64
	Amount             string
	Name               string
	Description        sql.NullString
	RecurrenceInterval RecurrenceIntervalEnum
	ProjectedAmount    string
	NextOccurrence     time.Time
}

type CreateNewRecurringExpenseRow struct {
	ID        int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) CreateNewRecurringExpense(ctx context.Context, arg CreateNewRecurringExpenseParams) (CreateNewRecurringExpenseRow, error) {
	row := q.db.QueryRowContext(ctx, createNewRecurringExpense,
		arg.UserID,
		arg.BudgetID,
		arg.Amount,
		arg.Name,
		arg.Description,
		arg.RecurrenceInterval,
		arg.ProjectedAmount,
		arg.NextOccurrence,
	)
	var i CreateNewRecurringExpenseRow
	err := row.Scan(&i.ID, &i.CreatedAt, &i.UpdatedAt)
	return i, err
}

const getAllRecurringExpensesDueForProcessing = `-- name: GetAllRecurringExpensesDueForProcessing :many
SELECT
    COUNT(*) OVER() AS total_count,
    id, 
    user_id, 
    budget_id, 
    amount, 
    name, 
    description, 
    recurrence_interval, 
    projected_amount,
    next_occurrence, 
    created_at, 
    updated_at
FROM recurring_expenses
WHERE next_occurrence <= CURRENT_DATE
ORDER BY next_occurrence ASC
LIMIT $1 OFFSET $2
`

type GetAllRecurringExpensesDueForProcessingParams struct {
	Limit  int32
	Offset int32
}

type GetAllRecurringExpensesDueForProcessingRow struct {
	TotalCount         int64
	ID                 int64
	UserID             int64
	BudgetID           int64
	Amount             string
	Name               string
	Description        sql.NullString
	RecurrenceInterval RecurrenceIntervalEnum
	ProjectedAmount    string
	NextOccurrence     time.Time
	CreatedAt          sql.NullTime
	UpdatedAt          sql.NullTime
}

func (q *Queries) GetAllRecurringExpensesDueForProcessing(ctx context.Context, arg GetAllRecurringExpensesDueForProcessingParams) ([]GetAllRecurringExpensesDueForProcessingRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllRecurringExpensesDueForProcessing, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllRecurringExpensesDueForProcessingRow
	for rows.Next() {
		var i GetAllRecurringExpensesDueForProcessingRow
		if err := rows.Scan(
			&i.TotalCount,
			&i.ID,
			&i.UserID,
			&i.BudgetID,
			&i.Amount,
			&i.Name,
			&i.Description,
			&i.RecurrenceInterval,
			&i.ProjectedAmount,
			&i.NextOccurrence,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExpenseByID = `-- name: GetExpenseByID :one
SELECT 
    id, 
    user_id, 
    budget_id, 
    name, 
    category, 
    amount, 
    is_recurring, 
    description, 
    date_occurred, 
    created_at, 
    updated_at
FROM expenses
WHERE id = $1 AND user_id = $2
`

type GetExpenseByIDParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetExpenseByID(ctx context.Context, arg GetExpenseByIDParams) (Expense, error) {
	row := q.db.QueryRowContext(ctx, getExpenseByID, arg.ID, arg.UserID)
	var i Expense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BudgetID,
		&i.Name,
		&i.Category,
		&i.Amount,
		&i.IsRecurring,
		&i.Description,
		&i.DateOccurred,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getRecurringExpenseByID = `-- name: GetRecurringExpenseByID :one
SELECT 
    id, 
    user_id, 
    budget_id, 
    amount, 
    name, 
    description, 
    recurrence_interval, 
    projected_amount,
    next_occurrence, 
    created_at, 
    updated_at
FROM recurring_expenses
WHERE id = $1 AND user_id = $2
`

type GetRecurringExpenseByIDParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetRecurringExpenseByID(ctx context.Context, arg GetRecurringExpenseByIDParams) (RecurringExpense, error) {
	row := q.db.QueryRowContext(ctx, getRecurringExpenseByID, arg.ID, arg.UserID)
	var i RecurringExpense
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.BudgetID,
		&i.Amount,
		&i.Name,
		&i.Description,
		&i.RecurrenceInterval,
		&i.ProjectedAmount,
		&i.NextOccurrence,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateExpenseByID = `-- name: UpdateExpenseByID :one
UPDATE expenses SET
    name = $1,
    category = $2,
    amount = $3,
    is_recurring = $4,
    description = $5,
    date_occurred = $6
WHERE
    id = $7 AND user_id = $8
RETURNING updated_at
`

type UpdateExpenseByIDParams struct {
	Name         string
	Category     string
	Amount       string
	IsRecurring  bool
	Description  sql.NullString
	DateOccurred time.Time
	ID           int64
	UserID       int64
}

func (q *Queries) UpdateExpenseByID(ctx context.Context, arg UpdateExpenseByIDParams) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, updateExpenseByID,
		arg.Name,
		arg.Category,
		arg.Amount,
		arg.IsRecurring,
		arg.Description,
		arg.DateOccurred,
		arg.ID,
		arg.UserID,
	)
	var updated_at sql.NullTime
	err := row.Scan(&updated_at)
	return updated_at, err
}

const updateRecurringExpenseByID = `-- name: UpdateRecurringExpenseByID :one
UPDATE recurring_expenses SET
    amount = $1,
    name = $2,
    description = $3,
    recurrence_interval = $4,
    projected_amount = $5,
    next_occurrence = $6
WHERE
    id = $7 AND user_id = $8
RETURNING  updated_at
`

type UpdateRecurringExpenseByIDParams struct {
	Amount             string
	Name               string
	Description        sql.NullString
	RecurrenceInterval RecurrenceIntervalEnum
	ProjectedAmount    string
	NextOccurrence     time.Time
	ID                 int64
	UserID             int64
}

func (q *Queries) UpdateRecurringExpenseByID(ctx context.Context, arg UpdateRecurringExpenseByIDParams) (sql.NullTime, error) {
	row := q.db.QueryRowContext(ctx, updateRecurringExpenseByID,
		arg.Amount,
		arg.Name,
		arg.Description,
		arg.RecurrenceInterval,
		arg.ProjectedAmount,
		arg.NextOccurrence,
		arg.ID,
		arg.UserID,
	)
	var updated_at sql.NullTime
	err := row.Scan(&updated_at)
	return updated_at, err
}
