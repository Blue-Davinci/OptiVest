// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment_queries.sql

package database

import (
	"context"
	"database/sql"
)

const createNewComment = `-- name: CreateNewComment :one
INSERT INTO comments (
    content,
    user_id,
    parent_id,
    associated_type,
    associated_id
    )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, updated_at, version
`

type CreateNewCommentParams struct {
	Content        string
	UserID         int64
	ParentID       sql.NullInt64
	AssociatedType CommentAssociatedType
	AssociatedID   int64
}

type CreateNewCommentRow struct {
	ID        int64
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Version   sql.NullInt32
}

func (q *Queries) CreateNewComment(ctx context.Context, arg CreateNewCommentParams) (CreateNewCommentRow, error) {
	row := q.db.QueryRowContext(ctx, createNewComment,
		arg.Content,
		arg.UserID,
		arg.ParentID,
		arg.AssociatedType,
		arg.AssociatedID,
	)
	var i CreateNewCommentRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :one
DELETE FROM comments
WHERE id = $1 AND user_id = $2
RETURNING id
`

type DeleteCommentParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) DeleteComment(ctx context.Context, arg DeleteCommentParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, deleteComment, arg.ID, arg.UserID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getCommentById = `-- name: GetCommentById :one
SELECT 
    id,
    content,
    user_id,
    parent_id,
    associated_type,
    associated_id,
    created_at,
    updated_at,
    version
FROM comments
WHERE id = $1 AND user_id = $2
`

type GetCommentByIdParams struct {
	ID     int64
	UserID int64
}

func (q *Queries) GetCommentById(ctx context.Context, arg GetCommentByIdParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, arg.ID, arg.UserID)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Content,
		&i.UserID,
		&i.ParentID,
		&i.AssociatedType,
		&i.AssociatedID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}

const updateComment = `-- name: UpdateComment :one
UPDATE comments
SET content = $1, version = version + 1
WHERE id = $2 AND user_id = $3 AND version = $4
RETURNING updated_at, version
`

type UpdateCommentParams struct {
	Content string
	ID      int64
	UserID  int64
	Version sql.NullInt32
}

type UpdateCommentRow struct {
	UpdatedAt sql.NullTime
	Version   sql.NullInt32
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (UpdateCommentRow, error) {
	row := q.db.QueryRowContext(ctx, updateComment,
		arg.Content,
		arg.ID,
		arg.UserID,
		arg.Version,
	)
	var i UpdateCommentRow
	err := row.Scan(&i.UpdatedAt, &i.Version)
	return i, err
}
