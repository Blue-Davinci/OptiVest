// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (
    first_name, 
    last_name, 
    email, 
    password_hash, 
    phone_number, 
    activated, 
    profile_completed, 
    dob, 
    address, 
    country_code, 
    currency_code
) VALUES (
    $1,  -- First name
    $2,  -- Last name
    $3,  -- Email
    $4,  -- Password hash
    $5,  -- Phone number
    $6,  -- Activated
    $7,  -- Profile completed
    $8,  -- Date of birth (dob)
    $9, -- Address
    $10, -- Country code
    $11  -- Currency code
)
RETURNING id, created_at, updated_at, last_login version
`

type CreateNewUserParams struct {
	FirstName        string
	LastName         string
	Email            string
	PasswordHash     []byte
	PhoneNumber      string
	Activated        sql.NullBool
	ProfileCompleted sql.NullBool
	Dob              time.Time
	Address          sql.NullString
	CountryCode      sql.NullString
	CurrencyCode     sql.NullString
}

type CreateNewUserRow struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Version   time.Time
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PasswordHash,
		arg.PhoneNumber,
		arg.Activated,
		arg.ProfileCompleted,
		arg.Dob,
		arg.Address,
		arg.CountryCode,
		arg.CurrencyCode,
	)
	var i CreateNewUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return i, err
}
