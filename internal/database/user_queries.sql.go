// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createNewUser = `-- name: CreateNewUser :one
INSERT INTO users (
    first_name,
    last_name,
    email,
    profile_avatar_url,
    password,
    phone_number,
    profile_completed,
    dob,
    address,
    country_code,
    currency_code
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11
)
RETURNING id, created_at, updated_at, last_login, version, mfa_enabled, mfa_secret, mfa_status, mfa_last_checked
`

type CreateNewUserParams struct {
	FirstName        string
	LastName         string
	Email            string
	ProfileAvatarUrl string
	Password         []byte
	PhoneNumber      string
	ProfileCompleted bool
	Dob              time.Time
	Address          sql.NullString
	CountryCode      sql.NullString
	CurrencyCode     sql.NullString
}

type CreateNewUserRow struct {
	ID             int64
	CreatedAt      time.Time
	UpdatedAt      time.Time
	LastLogin      time.Time
	Version        int32
	MfaEnabled     bool
	MfaSecret      sql.NullString
	MfaStatus      NullMfaStatusType
	MfaLastChecked sql.NullTime
}

func (q *Queries) CreateNewUser(ctx context.Context, arg CreateNewUserParams) (CreateNewUserRow, error) {
	row := q.db.QueryRowContext(ctx, createNewUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ProfileAvatarUrl,
		arg.Password,
		arg.PhoneNumber,
		arg.ProfileCompleted,
		arg.Dob,
		arg.Address,
		arg.CountryCode,
		arg.CurrencyCode,
	)
	var i CreateNewUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.Version,
		&i.MfaEnabled,
		&i.MfaSecret,
		&i.MfaStatus,
		&i.MfaLastChecked,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT 
    id,
    first_name,
    last_name,
    email,
    profile_avatar_url,
    password,
    user_role,
    phone_number,
    activated,
    version,
    created_at,
    updated_at,
    last_login,
    profile_completed,
    dob,
    address,
    country_code,
    currency_code,
    mfa_enabled,
    mfa_secret,
    mfa_status,
    mfa_last_checked
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.ProfileAvatarUrl,
		&i.Password,
		&i.UserRole,
		&i.PhoneNumber,
		&i.Activated,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.LastLogin,
		&i.ProfileCompleted,
		&i.Dob,
		&i.Address,
		&i.CountryCode,
		&i.CurrencyCode,
		&i.MfaEnabled,
		&i.MfaSecret,
		&i.MfaStatus,
		&i.MfaLastChecked,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET
    first_name = $1,
    last_name = $2,
    email = $3,
    profile_avatar_url = $4,
    password = $5,
    user_role = $6,
    phone_number = $7,
    activated = $8,
    version = version + 1,
    updated_at = NOW(),
    last_login = $9,
    profile_completed = $10,
    dob = $11,
    address = $12,
    country_code = $13,
    currency_code = $14,
    mfa_enabled = $15,
    mfa_secret = $16,
    mfa_status = $17,
    mfa_last_checked = $18
WHERE id = $19 AND version = $20
RETURNING updated_at, version
`

type UpdateUserParams struct {
	FirstName        string
	LastName         string
	Email            string
	ProfileAvatarUrl string
	Password         []byte
	UserRole         string
	PhoneNumber      string
	Activated        bool
	LastLogin        time.Time
	ProfileCompleted bool
	Dob              time.Time
	Address          sql.NullString
	CountryCode      sql.NullString
	CurrencyCode     sql.NullString
	MfaEnabled       bool
	MfaSecret        sql.NullString
	MfaStatus        NullMfaStatusType
	MfaLastChecked   sql.NullTime
	ID               int64
	Version          int32
}

type UpdateUserRow struct {
	UpdatedAt time.Time
	Version   int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (UpdateUserRow, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.ProfileAvatarUrl,
		arg.Password,
		arg.UserRole,
		arg.PhoneNumber,
		arg.Activated,
		arg.LastLogin,
		arg.ProfileCompleted,
		arg.Dob,
		arg.Address,
		arg.CountryCode,
		arg.CurrencyCode,
		arg.MfaEnabled,
		arg.MfaSecret,
		arg.MfaStatus,
		arg.MfaLastChecked,
		arg.ID,
		arg.Version,
	)
	var i UpdateUserRow
	err := row.Scan(&i.UpdatedAt, &i.Version)
	return i, err
}
