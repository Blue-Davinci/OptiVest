// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: investment_portfolio.queries.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createNewStockInvestment = `-- name: CreateNewStockInvestment :one
INSERT INTO
    stock_investments (
        user_id,
        stock_symbol,
        quantity,
        purchase_price,
        current_value,
        sector,
        purchase_date,
        dividend_yield
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8) 
RETURNING id,dividend_yield_updated_at, created_at,updated_at
`

type CreateNewStockInvestmentParams struct {
	UserID        int64
	StockSymbol   string
	Quantity      string
	PurchasePrice string
	CurrentValue  string
	Sector        sql.NullString
	PurchaseDate  time.Time
	DividendYield sql.NullString
}

type CreateNewStockInvestmentRow struct {
	ID                     int64
	DividendYieldUpdatedAt sql.NullTime
	CreatedAt              sql.NullTime
	UpdatedAt              sql.NullTime
}

func (q *Queries) CreateNewStockInvestment(ctx context.Context, arg CreateNewStockInvestmentParams) (CreateNewStockInvestmentRow, error) {
	row := q.db.QueryRowContext(ctx, createNewStockInvestment,
		arg.UserID,
		arg.StockSymbol,
		arg.Quantity,
		arg.PurchasePrice,
		arg.CurrentValue,
		arg.Sector,
		arg.PurchaseDate,
		arg.DividendYield,
	)
	var i CreateNewStockInvestmentRow
	err := row.Scan(
		&i.ID,
		&i.DividendYieldUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStockByStockID = `-- name: GetStockByStockID :one
SELECT
    id,
    user_id,
    stock_symbol,
    quantity,
    purchase_price,
    current_value,
    sector,
    purchase_date,
    dividend_yield,
    dividend_yield_updated_at,
    created_at,
    updated_at
FROM stock_investments
WHERE id = $1
`

func (q *Queries) GetStockByStockID(ctx context.Context, id int64) (StockInvestment, error) {
	row := q.db.QueryRowContext(ctx, getStockByStockID, id)
	var i StockInvestment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockSymbol,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CurrentValue,
		&i.Sector,
		&i.PurchaseDate,
		&i.DividendYield,
		&i.DividendYieldUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStockInvestmentByUserIDAndStockSymbol = `-- name: GetStockInvestmentByUserIDAndStockSymbol :one
SELECT
    id,
    user_id,
    stock_symbol,
    quantity,
    purchase_price,
    current_value,
    sector,
    purchase_date,
    dividend_yield,
    dividend_yield_updated_at,
    created_at,
    updated_at
FROM stock_investments
WHERE user_id = $1
AND stock_symbol = $2
`

type GetStockInvestmentByUserIDAndStockSymbolParams struct {
	UserID      int64
	StockSymbol string
}

func (q *Queries) GetStockInvestmentByUserIDAndStockSymbol(ctx context.Context, arg GetStockInvestmentByUserIDAndStockSymbolParams) (StockInvestment, error) {
	row := q.db.QueryRowContext(ctx, getStockInvestmentByUserIDAndStockSymbol, arg.UserID, arg.StockSymbol)
	var i StockInvestment
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.StockSymbol,
		&i.Quantity,
		&i.PurchasePrice,
		&i.CurrentValue,
		&i.Sector,
		&i.PurchaseDate,
		&i.DividendYield,
		&i.DividendYieldUpdatedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStockInvestment = `-- name: UpdateStockInvestment :one
UPDATE stock_investments
SET
    quantity = $1,
    purchase_price = $2,
    current_value = $3,
    sector = $4,
    purchase_date = $5,
    dividend_yield = $6,
    dividend_yield_updated_at = $7
WHERE id = $8
AND user_id = $9
RETURNING dividend_yield_updated_at,updated_at
`

type UpdateStockInvestmentParams struct {
	Quantity               string
	PurchasePrice          string
	CurrentValue           string
	Sector                 sql.NullString
	PurchaseDate           time.Time
	DividendYield          sql.NullString
	DividendYieldUpdatedAt sql.NullTime
	ID                     int64
	UserID                 int64
}

type UpdateStockInvestmentRow struct {
	DividendYieldUpdatedAt sql.NullTime
	UpdatedAt              sql.NullTime
}

func (q *Queries) UpdateStockInvestment(ctx context.Context, arg UpdateStockInvestmentParams) (UpdateStockInvestmentRow, error) {
	row := q.db.QueryRowContext(ctx, updateStockInvestment,
		arg.Quantity,
		arg.PurchasePrice,
		arg.CurrentValue,
		arg.Sector,
		arg.PurchaseDate,
		arg.DividendYield,
		arg.DividendYieldUpdatedAt,
		arg.ID,
		arg.UserID,
	)
	var i UpdateStockInvestmentRow
	err := row.Scan(&i.DividendYieldUpdatedAt, &i.UpdatedAt)
	return i, err
}
