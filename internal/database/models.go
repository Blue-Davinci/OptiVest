// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type GoalStatus string

const (
	GoalStatusOngoing   GoalStatus = "ongoing"
	GoalStatusCompleted GoalStatus = "completed"
	GoalStatusCancelled GoalStatus = "cancelled"
)

func (e *GoalStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = GoalStatus(s)
	case string:
		*e = GoalStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for GoalStatus: %T", src)
	}
	return nil
}

type NullGoalStatus struct {
	GoalStatus GoalStatus
	Valid      bool // Valid is true if GoalStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGoalStatus) Scan(value interface{}) error {
	if value == nil {
		ns.GoalStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.GoalStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGoalStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.GoalStatus), nil
}

type MfaStatusType string

const (
	MfaStatusTypePending  MfaStatusType = "pending"
	MfaStatusTypeAccepted MfaStatusType = "accepted"
	MfaStatusTypeRejected MfaStatusType = "rejected"
)

func (e *MfaStatusType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = MfaStatusType(s)
	case string:
		*e = MfaStatusType(s)
	default:
		return fmt.Errorf("unsupported scan type for MfaStatusType: %T", src)
	}
	return nil
}

type NullMfaStatusType struct {
	MfaStatusType MfaStatusType
	Valid         bool // Valid is true if MfaStatusType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMfaStatusType) Scan(value interface{}) error {
	if value == nil {
		ns.MfaStatusType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.MfaStatusType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMfaStatusType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.MfaStatusType), nil
}

type TrackingTypeEnum string

const (
	TrackingTypeEnumMonthly TrackingTypeEnum = "monthly"
	TrackingTypeEnumBonus   TrackingTypeEnum = "bonus"
	TrackingTypeEnumOther   TrackingTypeEnum = "other"
)

func (e *TrackingTypeEnum) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TrackingTypeEnum(s)
	case string:
		*e = TrackingTypeEnum(s)
	default:
		return fmt.Errorf("unsupported scan type for TrackingTypeEnum: %T", src)
	}
	return nil
}

type NullTrackingTypeEnum struct {
	TrackingTypeEnum TrackingTypeEnum
	Valid            bool // Valid is true if TrackingTypeEnum is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTrackingTypeEnum) Scan(value interface{}) error {
	if value == nil {
		ns.TrackingTypeEnum, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TrackingTypeEnum.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTrackingTypeEnum) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TrackingTypeEnum), nil
}

type Budget struct {
	ID             int64
	UserID         int64
	Name           string
	IsStrict       bool
	Category       string
	TotalAmount    string
	CurrencyCode   string
	ConversionRate string
	Description    sql.NullString
	CreatedAt      time.Time
	UpdatedAt      time.Time
}

type Goal struct {
	ID                  int64
	UserID              int64
	BudgetID            sql.NullInt64
	Name                string
	CurrentAmount       sql.NullString
	TargetAmount        string
	MonthlyContribution string
	StartDate           time.Time
	EndDate             time.Time
	Status              GoalStatus
	CreatedAt           time.Time
	UpdatedAt           time.Time
}

type GoalTracking struct {
	ID                    int64
	UserID                sql.NullInt64
	GoalID                sql.NullInt64
	TrackingDate          time.Time
	ContributedAmount     string
	TrackingType          TrackingTypeEnum
	CreatedAt             sql.NullTime
	UpdatedAt             sql.NullTime
	TruncatedTrackingDate sql.NullTime
}

type Token struct {
	Hash   []byte
	UserID int64
	Expiry time.Time
	Scope  string
}

type User struct {
	ID               int64
	FirstName        string
	LastName         string
	Email            string
	ProfileAvatarUrl string
	Password         []byte
	RoleLevel        string
	PhoneNumber      string
	Activated        bool
	Version          int32
	CreatedAt        time.Time
	UpdatedAt        time.Time
	LastLogin        time.Time
	ProfileCompleted bool
	Dob              time.Time
	Address          sql.NullString
	CountryCode      sql.NullString
	CurrencyCode     sql.NullString
	MfaEnabled       bool
	MfaSecret        sql.NullString
	MfaStatus        NullMfaStatusType
	MfaLastChecked   sql.NullTime
}
